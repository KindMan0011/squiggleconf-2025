#+TITLE: SquiggleConf 2025 Repository Setup
#+AUTHOR: Your Name
#+DATE: <2025-06-17 Tue>
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: overview

* Repository Setup for SquiggleConf 2025

This document outlines the repository structure and setup process for the SquiggleConf 2025 notes and materials.

** Directory Structure
   
#+begin_src shell :tangle tools/scripts/create-structure.sh :shebang "#!/bin/bash"
# Create basic directory structure
mkdir -p sessions
mkdir -p speakers/speaker-notes
mkdir -p tools/{demo-projects,scripts}
mkdir -p diagrams
mkdir -p networking
mkdir -p exports/{html,pdf,markdown}
touch diagrams/.gitkeep

echo "Directory structure created successfully!"
#+end_src

** Session Files Creation

Create templates for all session files:

#+begin_src shell :tangle tools/scripts/create-session-files.sh :shebang "#!/bin/bash"
# Create session index
cat > sessions/index.org << EOF
#+TITLE: SquiggleConf 2025 Sessions
#+STARTUP: overview

* Session Index

This directory contains notes for all SquiggleConf 2025 sessions. Sessions are organized by topic category.

** Build Tools & Bundlers
- [[file:rolldown-vite-rust.org][Rolldown: How Vite Bundles at the Speed of Rust]]
- [[file:lockfiles-phd.org][The Lockfiles PhD You Never Got]]

** Language Servers & IDE Tooling
- [[file:zero-to-squiggle-lsp.org][Zero to Squiggle with the Language Server Protocol]]
- [[file:source-maps-magic.org][Source Maps: How Does the Magic Work?]]

** TypeScript & Type Systems
- [[file:typescript-to-go.org][How and Why We Ported TypeScript to Go]]
- [[file:effect-type-safe-errors.org][Effect: Type-Safe Errors and Dependency Injection]]

** Developer Experience
- [[file:make-tools-people-love.org][Make Tools That People Love]]
- [[file:tech-broke-my-heart.org][Tech Broke My Heart]]
- [[file:electron-internal-tooling.org][Electron's Internal Tooling: Open Source at Scale]]

** Framework & Library Ecosystems
- [[file:javascript-framework-cage-match.org][JavaScript Framework Cage Match]]
- [[file:jsr-package-registry.org][JSR: Designing Package Registry Module Resolution]]

** WebAssembly & Cross-Platform
- [[file:aot-typescript-wasm.org][Ahead-of-Time TypeScript Compilation with WebAssembly]]
- [[file:wasi-building-blocks.org][WASI: Building Blocks for the Future]]

** Accessibility & Quality
- [[file:accessibility-storybook.org][Accessibility Testing with Storybook]]
- [[file:quality-code-samples.org][Building Quality Code Samples for Documentation]]

** Tooling Documentation
- [[file:why-we-made-tsdoc.org][Why We Made TSDoc: Documentation for TypeScript]]
- [[file:cross-browser-devtools.org][Cross-Browser DevTools with WebExtensions]]
EOF

# Create template session file
cat > sessions/template-session.org << EOF
#+TITLE: Session Title
#+DATE: <2025-09-DD Day HH:MM>
#+PROPERTY: header-args:language :session *session-id* :results output
#+PROPERTY: header-args:mermaid :file ../diagrams/session-diagram-%%N.png

* Session Information
- *Speaker*: Speaker Name (Organization)
- *Time*: Day X, HH:MM AM/PM
- *Topics*: Topic1, Topic2, Topic3

* Pre-Session Research
- [[https://link-to-resource][Resource Name]]
- Notes on previous work

* Key Insights

** Main Topic 1
- Point 1
- Point 2

** Main Topic 2
- Point 1
- Point 2

* Code Examples

#+begin_src language
// Code example
#+end_src

* Questions to Ask
- Question 1?
- Question 2?

* TODO Items [0/3]
- [ ] Task 1
- [ ] Task 2
- [ ] Task 3
EOF

echo "Session templates created successfully!"
#+end_src

** Speaker Directory Setup

#+begin_src shell :tangle tools/scripts/create-speaker-files.sh :shebang "#!/bin/bash"
# Create speaker index
cat > speakers/index.org << EOF
#+TITLE: SquiggleConf 2025 Speakers
#+STARTUP: overview

* Speaker Directory

This directory contains profiles and notes for all SquiggleConf 2025 speakers.

** Keynote Speakers

*** Anthony Fu
- *Session*: [[file:../sessions/make-tools-people-love.org][Make Tools That People Love]]
- *Background*: Open sourceror and design engineer
- *Known For*: VueUse, Slidev, UnoCSS, various Vite plugins
- *Links*: [[https://github.com/antfu][GitHub]], [[https://twitter.com/antfu7][Twitter]]
- *Notes*: [[file:speaker-notes/anthony-fu.org][Speaker Notes]]

*** Jake Bailey
- *Session*: [[file:../sessions/typescript-to-go.org][How and Why We Ported TypeScript to Go]]
- *Background*: TypeScript team at Microsoft
- *Known For*: Work on TypeScript compiler performance
- *Links*: [[https://github.com/jakebailey][GitHub]], [[https://twitter.com/jbailey0][Twitter]]
- *Notes*: [[file:speaker-notes/jake-bailey.org][Speaker Notes]]

*** Michelle Bakels
- *Session*: [[file:../sessions/tech-broke-my-heart.org][Tech Broke My Heart]]
- *Background*: Software developer, program director of developer health at G2i
- *Known For*: Mental health advocacy in tech
- *Links*: [[https://twitter.com/MichelleBakels][Twitter]]
- *Notes*: [[file:speaker-notes/michelle-bakels.org][Speaker Notes]]

** Core Track Speakers

*** Shelley Vohr
- *Session*: [[file:../sessions/electron-internal-tooling.org][Electron's Internal Tooling: Open Source at Scale]]
- *Background*: Core engineer @electron; collaborator @nodejs
- *Known For*: Electron, Node.js contributions
- *Links*: [[https://github.com/codebytere][GitHub]], [[https://twitter.com/codebytere][Twitter]]
- *Notes*: [[file:speaker-notes/shelley-vohr.org][Speaker Notes]]

*** Nicolò Ribaudo
- *Session*: [[file:../sessions/source-maps-magic.org][Source Maps: How Does the Magic Work?]]
- *Background*: Babel maintainer and TC39 representative at Igalia
- *Known For*: Babel, JavaScript standards
- *Links*: [[https://github.com/nicolo-ribaudo][GitHub]], [[https://twitter.com/NicoloRibaudo][Twitter]]
- *Notes*: [[file:speaker-notes/nicolo-ribaudo.org][Speaker Notes]]

# Additional speakers...
EOF

# Create template speaker note file
cat > speakers/speaker-notes/template-speaker.org << EOF
#+TITLE: Speaker Name Notes
#+DATE: <2025-09-DD Day>
#+STARTUP: overview

* Speaker: Full Name

** Background
- Current role and organization
- Previous experience
- Education

** Expertise Areas
- Area 1
- Area 2
- Area 3

** Notable Projects
- Project 1: Description
- Project 2: Description

** Session Preparation
- Topics to research before the session
- Questions to prepare

** Follow-up Actions
- [ ] Connect on LinkedIn/Twitter
- [ ] Look into mentioned projects
- [ ] Review session recording when available
EOF

echo "Speaker templates created successfully!"
#+end_src

** Networking Events Setup

#+begin_src shell :tangle tools/scripts/create-networking-files.sh :shebang "#!/bin/bash"
# Create networking event files
cat > networking/boston-ts-club.org << EOF
#+TITLE: Boston TypeScript Club
#+DATE: <2025-09-18 Thu 18:30>
#+PROPERTY: header-args :mkdirp yes

* Boston TypeScript Club Meetup at SquiggleConf

** Event Details
- *Date*: Thursday, September 18, 2025 (Day 1 Evening)
- *Time*: 6:30 PM - 8:30 PM
- *Location*: The Reef Bar & Lounge, New England Aquarium
- *Registration*: Required via SquiggleConf app

** About Boston TS Club

The Boston TypeScript Club is a community of TypeScript enthusiasts, developers, and learners from the greater Boston area. The group meets monthly to discuss TypeScript features, patterns, tooling, and community projects.

** Special SquiggleConf Meetup Agenda

*** Welcome & Introductions (6:30-7:00)
- Brief introduction to Boston TS Club
- Meet the organizers
- Networking activity: TypeScript Trivia

*** Lightning Talks (7:00-8:00)
1. "TypeScript Compiler API Deep Dive" - Jake Bailey (Microsoft)
2. "Building Type-Safe APIs with tRPC" - Local community member
3. "TypeScript Tooling in Large Monorepos" - David Sherret (Deno)
4. "Open Mic" - 3-minute slots for attendees

*** Open Discussion & Networking (8:00-8:30)
- TypeScript career opportunities in Boston
- Upcoming local events
- Project collaborations

** Contact Information
- *Organizer*: Sarah Chen
- *Email*: boston-ts-club@example.com
- *Twitter*: @BostonTSClub
- *Meetup Group*: [[https://meetup.com/boston-typescript-club][meetup.com/boston-typescript-club]]

** TODO Items [0/3]
- [ ] Register for the meetup through SquiggleConf app
- [ ] Prepare icebreaker question for networking
- [ ] Consider submitting a lightning talk topic
EOF

cat > networking/michigan-typescript.org << EOF
#+TITLE: Michigan TypeScript Community
#+DATE: <2025-09-19 Fri 17:30>
#+PROPERTY: header-args :mkdirp yes

* Michigan TypeScript Community at SquiggleConf

** Event Details
- *Date*: Friday, September 19, 2025 (Day 2 Evening)
- *Time*: 5:30 PM - 7:00 PM
- *Location*: Harbor View Terrace, New England Aquarium
- *Registration*: Open to all SquiggleConf attendees

** About Michigan TypeScript

Michigan TypeScript is a growing community focused on TypeScript education, mentorship, and project collaboration across Michigan. The group organizes virtual and in-person events, workshops, and hackathons to promote TypeScript adoption and best practices.

** SquiggleConf Meetup Agenda

*** Welcome & Community Introduction (5:30-5:45)
- Overview of Michigan TypeScript community
- Current initiatives and projects
- How to get involved remotely

*** Panel Discussion: Remote TypeScript Communities (5:45-6:30)
*Topic*: "Building Vibrant Tech Communities Outside Major Tech Hubs"

*Panelists*:
- Michelle Bakels (G2i) - Moderator
- Daniel Thompson (Michigan TypeScript founder)
- Representatives from other regional TypeScript groups
- SquiggleConf attendees from non-coastal tech communities

*** Networking & Collaboration (6:30-7:00)
- Regional TypeScript community showcase
- Discussion of cross-community collaboration opportunities
- Exchange of contact information and resources

** Getting Involved
- *Slack*: [[https://michigantype.script.com/slack][michigantype.script.com/slack]]
- *GitHub*: [[https://github.com/michigan-typescript][github.com/michigan-typescript]]
- *Twitter*: @MichiganTS
- *YouTube*: Michigan TypeScript Community

** TODO Items [0/3]
- [ ] Add contact information for Michigan TypeScript organizers
- [ ] Consider joining the mentorship program
- [ ] Look into remote meetup schedule
EOF

echo "Networking event files created successfully!"
#+end_src

** Initialize Git Repository

#+begin_src shell :tangle tools/scripts/init-git.sh :shebang "#!/bin/bash"
# Initialize git repository
git init
git add .
git commit -m "feat(repo): initialize SquiggleConf 2025 repository structure" --trailer "Co-Authored-By: Your Name <your.email@example.com>"

echo "Git repository initialized successfully!"
#+end_src

** Export Configuration

#+begin_src shell :tangle tools/scripts/export-all.sh :shebang "#!/bin/bash"
# Export all org files to HTML
find . -name "*.org" -exec emacs --batch --eval "(progn (find-file \"{}\") (org-html-export-to-html))" \;

# Export to PDF (requires LaTeX)
find . -name "*.org" -exec emacs --batch --eval "(progn (find-file \"{}\") (org-latex-export-to-pdf))" \;

# Export to Markdown
find . -name "*.org" -exec emacs --batch --eval "(progn (find-file \"{}\") (org-md-export-to-markdown))" \;

echo "All files exported successfully!"
#+end_src

** Make Scripts Executable

#+begin_src shell :tangle tools/scripts/make-executable.sh :shebang "#!/bin/bash"
# Make all scripts executable
chmod +x tools/scripts/*.sh
echo "All scripts are now executable!"
#+end_src

* Setting Up Your Environment

** Required Tools
- Emacs with Org mode
- Git
- Bash
- Python (for scripts and examples)
- Node.js (for TypeScript examples)
- Go (for TypeScript-to-Go examples)

** Optional Tools
- Mermaid.js (for diagrams)
- LaTeX (for PDF export)
- Pandoc (for additional export formats)

** Emacs Configuration

Here's a sample Emacs configuration for working with this repository:

#+begin_src emacs-lisp :tangle squiggleconf-2025.el
;;; squiggleconf-2025.el --- Emacs configuration for SquiggleConf 2025 notes

;;; Commentary:
;;; This file provides configuration for working with SquiggleConf 2025 notes.

;;; Code:

;; Basic org-mode setup
(require 'org)
(require 'org-tempo)

;; Enable syntax highlighting in org-mode source blocks
(setq org-src-fontify-natively t)

;; Enable tab in source blocks
(setq org-src-tab-acts-natively t)

;; Auto-tangle on save
(defun org-babel-auto-tangle ()
  (when (eq major-mode 'org-mode)
    (org-babel-tangle)))

(add-hook 'after-save-hook 'org-babel-auto-tangle)

;; Define custom structure templates for SquiggleConf notes
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("mm" . "src mermaid"))

;; Mermaid support
(org-babel-do-load-languages
 'org-babel-load-languages
 '((mermaid . t)
   (python . t)
   (shell . t)
   (js . t)
   (typescript . t)
   (go . t)))

;; Auto-display images after babel execution
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

;; Export configuration
(setq org-export-with-toc t)
(setq org-export-with-section-numbers t)
(setq org-html-validation-link nil)
(setq org-html-head-include-default-style nil)

;; Custom CSS for HTML export
(setq org-html-head
      "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/htmlize.css\"/>
<link rel=\"stylesheet\" type=\"text/css\" href=\"https://fniessen.github.io/org-html-themes/src/readtheorg_theme/css/readtheorg.css\"/>

<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>
<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>
<script type=\"text/javascript\" src=\"https://fniessen.github.io/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js\"></script>
<script type=\"text/javascript\" src=\"https://fniessen.github.io/org-html-themes/src/readtheorg_theme/js/readtheorg.js\"></script>")

;; Custom agenda configuration for conference schedule
(setq org-agenda-files '("~/projects/squiggleconf-2025/schedule.org"))
(setq org-agenda-custom-commands
      '(("c" "Conference Schedule" agenda ""
         ((org-agenda-span 2)
          (org-agenda-start-day "2025-09-18")
          (org-agenda-entry-types '(:scheduled))))))

(provide 'squiggleconf-2025)
;;; squiggleconf-2025.el ends here
#+end_src

* Usage Instructions

To start using this repository:

1. Clone the repository
2. Run the setup scripts:
   #+begin_src shell
   cd tools/scripts
   ./create-structure.sh
   ./create-session-files.sh
   ./create-speaker-files.sh
   ./create-networking-files.sh
   ./make-executable.sh
   #+end_src

3. Load the Emacs configuration:
   #+begin_src emacs-lisp
   (load-file "squiggleconf-2025.el")
   #+end_src

4. Create your own session notes based on the templates

5. Export your notes to various formats using the export script:
   #+begin_src shell
   ./tools/scripts/export-all.sh
   #+end_src

* Customization

Feel free to customize the templates and scripts to suit your specific needs for the conference. The repository structure is designed to be flexible while maintaining organization.